type Order {
  id: ID!
  startTime: String
  endTime: String
  OrderStatus: String
  RiderOrderID: String!
  OrderID: [String]
  LoginRiderID: String
}
type UserCurrentStatus {
  _id: ID
  currentStatus: UserStatus
  updatedAt: String
  userRole: [String]
  username: String
  branchCity: String
  branchname: String
}
enum UserStatus {
  online
  offline
}
input NewRiderOrderInput {
  startTime: String
  endTime: String
  OrderStatus: String
  RiderOrderID: String!
  branchname: String!
}
type Mutation {
  createRiderOrder(orders: [NewRiderOrderInput]): [Order]
  updateRiderOrder(
    id: ID
    startTime: String
    endTime: String
    OrderStatus: String
    RiderOrderID: String!
  ): Order
  updateUserCurrentStatus(status: UserStatus!): UserCurrentStatus
}
type OrderReport {
  LoginRiderID: ID
  riderName: String
  branchCity: String
  branchName: String
  orderStatus: String
  deliveryTime: String
  startTime: DateTime
  endTime: DateTime
}
type Query {
  getOrderById(id: ID!): [Order]
  getOrdersByStatus(OrderStatus: String!): [Order]
  generateOrderReport(
    branchName: String
    startTime: DateTime
    endTime: DateTime
  ): [OrderReport]
}
