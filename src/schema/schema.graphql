extend type Order {
  id: ID!
  startTime: String
  endTime: String
  OrderStatus: OrderStatusValue
  RiderOrderID: String!
  OrderID: [String]
  LoginRiderID: String
  username: String
  branchname: String
}
extend type Address {
  Latitude: Float
  Longitude: Float
}
# type BranchOrderReport {
#   b_id: ID
#   branchAccountId: ID
#   branchCartId: ID
#   branchCreatedAt: String
#   branchCurrencyCode: String
#   branchEmail: String
#   branchOrdererPreferredLanguage: String
#   branchPayments: [Payment]
#   branchShipping: [Shipping]
# }
type UserCurrentStatus {
  _id: ID
  currentStatus: UserStatus
  updatedAt: String
  UserRole: UserRoleValue
  username: String
  branchCity: String
  branchname: String
}
enum OrderStatusValue {
  orderConfirmed
  preparing
  ready
  pickedUp
  delivered
}
enum UserRoleValue {
  admin
  dispatcher
  rider
}
enum UserStatus {
  online
  offline
}
# type branchOwnerReportOutput {
#   _id: ID
#   accountId: String
#   cartId: String
#   createdAt:String
#   currencyCode: String
#   email: String
# }
type UserAccountDetail {
  _id: ID!
  username: String
  branch: [String!]!
}
type UserBranchData {
  _id: ID!
  branches: [String]
}
type RiderOrderDetail {
  RiderOrderID: ID!
  startTime: String
  endTime: String
  OrderStatus: OrderStatusValue
  branchname: String
  username: String
}
input NewRiderOrderInput {
  startTime: String
  endTime: String
  OrderStatus: OrderStatusValue
  RiderOrderID: String!
  branchname: String
  riderID: String
}
type Mutation {
  createRiderOrder(orders: [NewRiderOrderInput]): [Order]
  updateRiderOrder(
    id: ID
    startTime: String
    endTime: String
    OrderStatus: OrderStatusValue
    RiderOrderID: String!
    riderID: String
  ): Order
  updateUserCurrentStatus(status: UserStatus!): UserCurrentStatus
  assignBranchtoUser(userID: ID!, branches: String!): UserBranchData!
  updateAccountAdmin(userID: ID!, branches: String!): UserBranchData!
}
type OrderReport {
  LoginRiderID: ID
  riderName: String
  branchCity: String
  branchName: String
  orderStatus: OrderStatusValue
  deliveryTime: String
  startTime: DateTime
  endTime: DateTime
  username: String
  RiderOrderID: String
}

type Query {
  getOrderById(id: ID!): [Order]
  getOrdersByStatus(OrderStatus: String!): [Order]
  generateOrderReport(
    branchName: String
    startTime: DateTime
    endTime: DateTime
    LoginRiderID: ID
    RiderOrderID: String
  ): [OrderReport]
  getRiderOrdersByLoginRider(
    LoginRiderID: String! # startDate: String # endDate: String
  ): [RiderOrderDetail]
  getKitchenReport(
    branchID: String
    Orderstatus: OrderStatusValue
    startDate: String
    endDate: String
  ): [Order]
  # getAllRiders(branches:[String]):[]
}
